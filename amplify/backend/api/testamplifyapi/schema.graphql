# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type Todo
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "username" }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  description: String
}

type DemoSkillsList
  @model
  @auth(rules: [{ allow: public, operations: [read, create] }]) {
  id: ID!
  username: String
  value: String!
}

type DomainInterestedList
  @model
  @auth(rules: [{ allow: public, operations: [read, create] }]) {
  id: ID!
  username: String
  value: String!
}

type SuggestedServiceList
  @model
  @auth(rules: [{ allow: public, operations: [read, create] }]) {
  id: ID!
  username: String
  value: String!
}

type StudentRegister
  @model
  @auth(
    rules: [{ allow: public, operations: [read, update, create, delete] }]
  ) {
  student_id: ID
  student_name: String
  recent_college: String
  degree: String
  current_employee: String
  your_role: String
  experience: String
  phone_number: String
  about_yourself: AboutYourself
  username: String
  social: SocialUrl
  contact_info: ContactInfo
  education: Education
  professional_info: Professionalinfo
  profile_image: String
  student_profile: String
  interestedSkills: [String!]
  linkedIn_url: String!
}
type OneOnOne
  @model
  @auth(
    rules: [{ allow: public, operations: [read, update, create, delete] }]
  ) {
  sessionTitle: String
  username: String
  listedPrice: Float
  finalPrice: Float
  numberOfSessions: Int
  sessionDuration: Int
  sessionDurationIn: String
  description: String
  questions: [OneOnOneQuestions]
}
type OneOnOneQuestions {
  id: String
  text: String
  type: String
}
type TextQuery
  @model
  @auth(
    rules: [{ allow: public, operations: [read, update, create, delete] }]
  ) {
  title: String
  username: String
  description: String
  responseTime: Int
  responseTimeIn: String
  listedPrice: Float
  finalPrice: Float
  questions: [TextQueryQuestions]
}
type TextQueryQuestions {
  id: String
  text: String
  type: String
}
type Workshop
  @model
  @auth(
    rules: [{ allow: public, operations: [read, update, create, delete] }]
  ) {
  title: String
  username: String
  description: String
  callDuration: Int
  callDurationIn: String
  listedPrice: Float
  finalPrice: Float
  workshopDate: String
  workshopTime: String
  workshopImage: String
  hideService: Boolean
  limitedParticipants: Boolean
  audienceSize: Int
  questions: [WorkshopQuestions]
}
type WorkshopQuestions {
  id: String
  text: String
  type: String
}
type Courses
  @model
  @auth(
    rules: [{ allow: public, operations: [read, update, create, delete] }]
  ) {
  courseTitle: String
  username: String
  description: String
  numberOfSessions: Int
  sessionDuration: Int
  sessionDurationIn: String
  listedPrice: Float
  finalPrice: Float
  courseDate: String
  courseTime: String
  hideService: Boolean
  limitParticipants: Boolean
  audienceSize: Int
  courseImage: String
  sessions: [CourseSessions]
}
type CourseSessions {
  id: String
  text: String
  sessionDate: String
  sessionTime: String
}
type Packages
  @model
  @auth(
    rules: [{ allow: public, operations: [read, update, create, delete] }]
  ) {
  packageTitle: String
  username: String
  description: String
  listedPrice: Float
  finalPrice: Float
  packageImage: String
  emailContent: String
  uploadFile: String
  hideService: Boolean
  limitParticipants: Boolean
  audienceSize: Int
  packageServices: [PackageServices]
}
type PackageServices {
  id: String
  text: String
  title: String
  duration: String
  price: Float
}

type MentorRegister
  @model
  @auth(
    rules: [{ allow: public, operations: [read, update, create, delete] }]
  ) {
  mentor_id: ID
  mentor_name: String
  mentor_availability_id: String
  phone_number: String
  about_yourself: AboutYourself
  username: String
  social: SocialUrl
  currency: String
  time_zone: String
  contact_info: ContactInfo
  education: Education
  professional_info: Professionalinfo
  profile_image: String
  domain_id: [String!]
  url: String!
  mentor_service_id: [String!]
}
type Professionalinfo {
  occupation: String
  organization: String
  location: String
  position: String
  experience: Experience
}
type Education {
  degree: String
  college_university: String
  course: String
  graduation_year: Int
}

type Experience {
  years: String
  months: String
}
type AboutYourself {
  grow_junction_url: String
  first_name: String
  last_name: String
  short_description: String
  about_yourself: String
}
type ContactInfo {
  email: String
  mobile: String
  whatsapp: String
}
type SocialUrl {
  linkedin_url: String
  facebook_url: String
  instagram_url: String
  personal_web_url: String
  other_url: String
}

type Schedule
  @model
  @auth(
    rules: [{ allow: public, operations: [read, update, create, delete] }]
  ) {
  availableSameTime: Boolean
  daySchedules: DaySchedules
  username: String
  unavailableDates: [String]
}
type DaySchedules {
  everyday: Everyday
  Sunday: Sunday
  Monday: Monday
  Tuesday: Tuesday
  Wednesday: Wednesday
  Thursday: Thursday
  Friday: Friday
  Saturday: Saturday
}
type Everyday {
  everyday: Boolean
  time: [Time]
}
type Sunday {
  Sunday: Boolean
  time: [Time]
}
type Monday {
  Monday: Boolean
  time: [Time]
}
type Tuesday {
  Tuesday: Boolean
  time: [Time]
}
type Wednesday {
  Wednesday: Boolean
  time: [Time]
}
type Thursday {
  Thursday: Boolean
  time: [Time]
}
type Friday {
  Friday: Boolean
  time: [Time]
}
type Saturday {
  Saturday: Boolean
  time: [Time]
}
type Time {
  startTime: Boolean
  endTime: String
}
type UserInfo
  @model
  @auth(
    rules: [{ allow: public, operations: [read, update, create, delete] }]
  ) {
  kyc_done: Boolean
  register_type: String
  email: String
  name: String
  profile_image: String
}
type Configurations
  @model
  @auth(
    rules: [{ allow: public, operations: [read, update, create, delete] }]
  ) {
  timezone: String
  calender: String
  username: String
  personalMeetingLink: String
  bookingPeriod: Int
  bookingPeriodIn: String
  noticePeriod: Int
  noticePeriodIn: String
}
