# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type Todo
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "username" }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  username: String
  description: String
}

type DemoSkillsList
  @model
  @auth(rules: [{ allow: public, operations: [read, create] }]) {
  id: ID!
  value: String!
}

type DomainInterestedList
  @model
  @auth(rules: [{ allow: public, operations: [read, create] }]) {
  id: ID!
  value: String!
}

type SuggestedServiceList
  @model
  @auth(rules: [{ allow: public, operations: [read, create] }]) {
  id: ID!
  value: String!
}

type StudentRegister
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "username" }
      { allow: owner, operations: [read, update, create, delete] }
      { allow: public, operations: [read] }
    ]
  ) {
  student_id: ID
  student_name: String
  recent_college: String
  degree: String
  current_employee: String
  your_role: String
  experience: String
  phone_number: String
  about_yourself: AboutYourself
  username: String
  social: SocialUrl
  contact_info: ContactInfo
  education: Education
  professional_info: Professionalinfo
  profile_image: String
  student_profile: String
  interestedSkills: [String!]
  linkedIn_url: String!
}
type OneOnOne
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "username" }
      { allow: owner, operations: [read, update, create, delete] }
      { allow: public, operations: [read] }
    ]
  ) {
  sessionTitle: String
  username: String
  listedPrice: Float
  finalPrice: Float
  numberOfSessions: Int
  sessionDuration: Int
  sessionDurationIn: String
  description: String
  questions: [OneOnOneQuestions]
}
type OneOnOneQuestions {
  id: String
  text: String
  type: String
}
type TextQuery
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "username" }
      { allow: owner, operations: [read, update, create, delete] }
      { allow: public, operations: [read] }
    ]
  ) {
  title: String
  username: String
  description: String
  responseTime: Int
  responseTimeIn: String
  listedPrice: Float
  finalPrice: Float
  questions: [TextQueryQuestions]
}
type TextQueryQuestions {
  id: String
  text: String
  type: String
}
type MentorRegister
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "username" }
      { allow: owner, operations: [read, update, create, delete] }
      { allow: public, operations: [read] }
    ]
  ) {
  mentor_id: ID
  mentor_name: String
  mentor_availability_id: String
  phone_number: String
  about_yourself: AboutYourself
  username: String
  social: SocialUrl
  currency: String
  time_zone: String
  contact_info: ContactInfo
  education: Education
  professional_info: Professionalinfo
  profile_image: String
  domain_id: [String!]
  url: String!
  mentor_service_id: [String!]
}
type Professionalinfo {
  occupation: String
  organization: String
  location: String
  position: String
  experience: Experience
}
type Education {
  degree: String
  college_university: String
  course: String
  graduation_year: Int
}

type Experience {
  years: String
  months: String
}
type AboutYourself {
  grow_junction_url: String
  first_name: String
  last_name: String
  short_description: String
  about_yourself: String
}
type ContactInfo {
  email: String
  mobile: String
  whatsapp: String
}
type SocialUrl {
  linkedin_url: String
  facebook_url: String
  instagram_url: String
  personal_web_url: String
  other_url: String
}
type MentorAvailability
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "username" }
      { allow: owner, operations: [read, update, create, delete] }
      { allow: public, operations: [read] }
    ]
  ) {
  mentor_availability_id: ID!
  mentor_schedule: [MentorWeekSchedule!]
}

type MentorWeekSchedule
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "username" }
      { allow: owner, operations: [read, update, create] }
    ]
  ) {
  id: ID!
  sortId: Int!
  day: String!
  checked: Boolean
  time_schedule: [timeSchedule!]
    @hasMany(indexName: "byMentorSchedule", fields: ["id"])
}

type timeSchedule
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "username" }
      { allow: owner, operations: [read, update, create] }
    ]
  ) {
  Mentor: MentorWeekSchedule @belongsTo(fields: ["MentorWeekScheduleId"])
  MentorWeekScheduleId: ID @index(name: "byMentorSchedule")
  startTime: String!
  startTimeMeridian: String!
  endTime: String!
  endTimeMeridian: String!
  leftMeridianDropDown: Boolean
  rightMeridianDropDown: Boolean
}
